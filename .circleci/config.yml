# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

executors:
  win-server2022:
    machine:
      image: windows-server-2022-gui:current
    resource_class: windows.medium
    shell: powershell.exe -ExecutionPolicy Bypass

#orbs:
#  win: circleci/windows@5.0
#  wixtoolset: sensu/wixtoolset@1.0.0

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/jobs-steps/#jobs-overview & https://circleci.com/docs/configuration-reference/#jobs
jobs:
  build-windows:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/executor-intro/ & https://circleci.com/docs/configuration-reference/#executor-job
#    resource_class: 'windows.medium'
#    machine:
#      image: 'windows-server-2022-gui:current'
#      shell: 'powershell.exe -ExecutionPolicy Bypass'
    executor: win-server2022
    steps:
      # Commands are run in a Windows virtual machine environment
      - checkout
      - run: Write-Host 'Hello, Windows'

      # Download and cache dependencies
#      - restore_cache:
#          keys:
#            - v1-dependencies-{{ checksum "build.gradle" }}
#            # fallback to using the latest cache if no exact match is found
#            - v1-dependencies-
      - run:
          name: Print Java Version
          command: 'java -version'
      - run:
          name: Build
          shell: bash.exe
          command: |
            dotnet tool install --global wix

      - run:
          name: Print Jlink Version
          command: 'jpackage --version'

#      - run:
#          name: installation
#          command: |
#            apt-get update
#            apt-get install fakeroot -y

#      - run:
#          name: chmod permissions
#          command: chmod +x ./gradlew
#
#      - run: ./gradlew dependencies
#      - run: ./gradlew jlink
#      - run: ./gradlew jpackage
#      - run:
#          name: chmod permissions
#          command: chmod +x build
#      - run:
#          name: Copy linux
#          command: mkdir -p tmp/linux && cp build/jpackage/*.* tmp
#      - run:
#          name: check files
#          command: |
#            ls -al
#            cd build/jpackage
#            ls -al
#            echo '^^^jpackage files in your repo^^^'
#            cd ..
#            ls -al
#            echo '^^^The files in your repo^^^'
#
#      - run:
#          name: Install Pandoc
#          command: |
#            apt-get install pandoc -y

      #      - run: ./gradlew buildDocs

      #      - run:
      #          name: Creating Dummy Artifacts
      #          command: |
      #            echo "my artifact file" > /tmp/art-1;
      #            mkdir /tmp/artifacts;
      #            echo "my artifact files in a dir" > /tmp/artifacts/art-2;
      #      - store_artifacts:
      #          path: /tmp/art-1
      #          destination: artifact-file
      #      - store_artifacts:
      #          path: /tmp/artifacts

#      - store_artifacts:
#          path: /tmp
#          destination: .

#      - store_artifacts:
#          path: /tmp

#      - save_cache:
#          paths:
#            - ~/.gradle
#          key: v1-dependencies-{{ checksum "build.gradle" }}
      # run tests!
#      - run: ./gradlew test


# Orchestrate jobs using workflows
# See: https://circleci.com/docs/workflows/ & https://circleci.com/docs/configuration-reference/#workflows
workflows:
  version: 2
  sample:
    jobs:
      - build-windows:
          filters:
            branches:
              only:
                - master
                - test
                - release