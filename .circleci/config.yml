# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/jobs-steps/#jobs-overview & https://circleci.com/docs/configuration-reference/#jobs
jobs:
  build-linux:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/executor-intro/ & https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      # Specify the version you desire here
      # See: https://circleci.com/developer/images/image/cimg/openjdk
      #      - image: cimg/base:2022.06
      #      - image: ubuntu-2204:2024.01.1
      - image: azul/zulu-openjdk:17.0.9

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/circleci-images/
      # - image: circleci/postgres:9.4

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    # Add steps to the job
    # See: https://circleci.com/docs/jobs-steps/#steps-overview & https://circleci.com/docs/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Print Java Version
          command: 'java -version'

      - run:
          name: Print Jlink Version
          command: 'jpackage --version'

      - run:
          name: installation
          command: |
            sudo apt-get update
            sudo apt-get install fakeroot

      - run:
          name: chmod permissions
          command: chmod +x ./gradlew

      - run: ./gradlew dependencies
      - run: ./gradlew jlink
      - run: ./gradlew jpackage

      - store_artifacts:
          path: /build/jlinkbase/jlinkjars
          destination: /build/libs
      - store_artifacts:
          path: /tmp/artifacts

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      # run tests!
      - run: ./gradlew test


#  build-windows:
#    machine:
#      image: windows-server-2019-vs2019:stable
#      shell: powershell.exe
#      resource_class: windows.medium
#    steps:
#      -

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/workflows/ & https://circleci.com/docs/configuration-reference/#workflows
workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-linux